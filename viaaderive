#!/usr/bin/env bash
# creates derivative video files
# requires ffmpeg compiled with lib264 (yuv 8-bit) and ffprobe

SCREENING_FFV1_ENABLE=true
# usage
_usage(){
 echo "VIAA derivative script"
 echo
 echo "$(basename "$${0}") inputvideo1 [inputvideo2 ... ]"
}
[ "${#}" = 0 ] && _usage

# _report function handles display of messages to operator
_report(){
 local RED="$(tput setaf 1)"   # Red      - For Warnings
 local GREEN="$(tput setaf 2)" # Green    - For Declarations
 local BLUE="$(tput setaf 4)"  # Blue     - For Questions
 local NC="$(tput sgr0)"       # No Color
 local COLOR=""
 local STARTMESSAGE=""
 local ENDMESSAGE=""
 local ECHOOPT=""
 local LOG_MESSAGE=""
 OPTIND=1
 while getopts ":qdwstn" OPT; do
   case "${OPT}" in
     q) COLOR="${BLUE}" ;;                         # question mode, use color blue
     d) COLOR="${GREEN}" ;;                        # declaration mode, use color green
     w) COLOR="${RED}" ; LOG_MESSAGE="Y" ;;        # warning mode, use color red
     s) STARTMESSAGE+=([$(basename "${0}")] ) ;;   # prepend scriptname to the message
     t) STARTMESSAGE+=($(_get_iso8601) '- ' ) ;;   # prepend timestamp to the message
     n) ECHOOPT="-n" ;;                            # to avoid line breaks after echo
   esac
 done
 shift $(( ${OPTIND} - 1 ))
 MESSAGE="${1}"
 echo "${ECHOOPT}" "${COLOR}${STARTMESSAGE[@]}${MESSAGE}${NC}"
}

_mkdir2(){
    local DIR2MAKE=""
    while [ "${*}" != "" ] ; do
        DIR2MAKE="${1}"
        if [ ! -d "${DIR2MAKE}" ] ; then
            mkdir -p "${DIR2MAKE}"
            if [ "${?}" -ne 0 ]; then
                _report -wt "${0}: Can't create directory at ${DIR2MAKE}"
                exit 1
            fi
        fi
        shift
    done
}

_unset_variables(){
  unset VIDEOFILTERCHAIN
  unset AUDIOFILTERCHAIN
  unset CODEC_NAME
  unset HEIGHT
  unset AUDIO_INDEX_1
  unset AUDIO_INDEX_2
  unset AUDIO_CHANNELS
  unset CHANNEL_LAYOUT
  unset FFREPORT
  unset OUTPUTS
}

# filters for constructing filterchains
_add_video_filter(){
    OPTIND=1
    unset ADDASPREFIX
    while getopts ":p" OPT ; do
        case "${OPT}" in
            p) ADDASPREFIX=true ;;
        esac
    done
    shift $(( ${OPTIND} - 1 ))
    local FILTER2ADD="${1}"
    if [[ -n "${FILTER2ADD}" ]] ; then
        if [[ -n "${next_video_filter_prefix}" ]] ; then
            FILTER2ADD="${next_video_filter_prefix}${FILTER2ADD}"
            unset next_video_filter_prefix
        fi
        if [[ -z "${VIDEOFILTERCHAIN}" ]] ; then
            VIDEOFILTERCHAIN="${FILTER2ADD}"
        elif [[ "${ADDASPREFIX}" = true ]] ; then
            if [[ "${FILTER2ADD: -1}" = ";" || "${FILTER2ADD: -1}" = "," ]] ; then
                VIDEOFILTERCHAIN="${FILTER2ADD}${VIDEOFILTERCHAIN}"
            else
                VIDEOFILTERCHAIN="${FILTER2ADD},${VIDEOFILTERCHAIN}"
            fi
        else
            if [[ "${VIDEOFILTERCHAIN: -1}" = ";" || "${VIDEOFILTERCHAIN: -1}" = "," ]] ; then
                VIDEOFILTERCHAIN="${VIDEOFILTERCHAIN}${FILTER2ADD}"
            else
                VIDEOFILTERCHAIN="${VIDEOFILTERCHAIN},${FILTER2ADD}"
            fi
        fi
    fi
}
_add_audio_filter(){
    OPTIND=1
    unset ADDASPREFIX
    while getopts ":p" OPT ; do
        case "${OPT}" in
            p) ADDASPREFIX=true ;;
        esac
    done
    shift $(( ${OPTIND} - 1 ))
    local FILTER2ADD="${1}"
    if [[ -n "${FILTER2ADD}" ]] ; then
        if [[ -n "${next_audio_filter_prefix}" ]] ; then
            FILTER2ADD="${next_audio_filter_prefix}${FILTER2ADD}"
            unset next_audio_filter_prefix
        fi
        if [[ -z "${AUDIOFILTERCHAIN}" ]] ; then
            AUDIOFILTERCHAIN="${FILTER2ADD}"
        elif [[ "${ADDASPREFIX}" = true ]] ; then
            if [[ "${FILTER2ADD: -1}" = ";" || "${FILTER2ADD: -1}" = "," ]] ; then
                AUDIOFILTERCHAIN="${FILTER2ADD}${AUDIOFILTERCHAIN}"
            else
                AUDIOFILTERCHAIN="${FILTER2ADD},${AUDIOFILTERCHAIN}"
            fi
        else
            if [[ "${AUDIOFILTERCHAIN: -1}" = ";" || "${AUDIOFILTERCHAIN: -1}" = "," ]] ; then
                AUDIOFILTERCHAIN="${AUDIOFILTERCHAIN}${FILTER2ADD}"
            else
                AUDIOFILTERCHAIN="${AUDIOFILTERCHAIN},${FILTER2ADD}"
            fi
        fi
    fi
}
_filter_to_middle_option(){
    if [ -n "${VIDEOFILTERCHAIN}" -a -n "${AUDIOFILTERCHAIN}" ] ; then
        MIDDLEOPTIONS+=(-filter_complex ${VIDEOFILTERCHAIN}\;${AUDIOFILTERCHAIN})
    elif [ -n "${VIDEOFILTERCHAIN}" ] ; then
        MIDDLEOPTIONS+=(-filter_complex ${VIDEOFILTERCHAIN})
    elif [ -n "${AUDIOFILTERCHAIN}" ] ; then
        MIDDLEOPTIONS+=(-filter_complex ${AUDIOFILTERCHAIN})
    fi
}
# _get_input info
_get_input_info(){
 CODEC_NAME=$(ffprobe "${1}" -select_streams v:0 -show_entries stream=codec_name 2>/dev/null -of default=nk=1:nw=1)
 HEIGHT=$(ffprobe "${1}" -select_streams v:0 -show_entries stream=height 2>/dev/null -of default=nk=1:nw=1)
 VIDEOSTREAMCOUNT=$(ffprobe "${1}" -select_streams v -show_entries stream=index -of flat 2>/dev/null | awk 'END { print NR }')
 AUDIOSTREAMCOUNT=$(ffprobe "${1}" -select_streams a -show_entries stream=index -of flat 2>/dev/null | awk 'END { print NR }')
}

# _get_audio_mapping handles re-mixing audio to a single track for access
_get_audio_mapping(){
 _get_audio_index(){
   # get ffmpeg's index value of the first audio stream. Useful for do custom channel mappings.
   AUDIO_INDEX_1=$(ffprobe "${1}" -show_streams -select_streams a:0 2>/dev/null | grep "^index=" | cut -d = -f 2)
   AUDIO_INDEX_2=$(ffprobe "${1}" -show_streams -select_streams a:1 2>/dev/null | grep "^index=" | cut -d = -f 2)
 }
 _get_audio_channels(){
   # get ffmpeg's channel count of the first audio stream.
   AUDIO_CHANNELS=$(ffprobe "${1}" -show_streams -select_streams a 2>/dev/null | grep "^channels=" | cut -d = -f 2 | head -n 1)
 }
 _get_channel_layout(){
   # get ffmpeg's channel count of the first audio stream.
   CHANNEL_LAYOUT=$(ffprobe "${1}" -show_streams -select_streams a 2>/dev/null | grep "^channel_layout=" | cut -d = -f 2 | head -n 1)
 }
 _get_audio_index "${1}"
 _get_audio_channels "${1}"
 _get_channel_layout "${1}"
 _has_first_two_tracks_mono "${1}"
 if [[ "${MULTIMONO}" = true ]] ; then
   _report -wt "The first two audio tracks are both mono. Considering track 1 for left and track 2 for right."
   _add_audio_filter -p "[0:a:0][0:a:1]amerge=inputs=2"
   _add_audio_filter "aformat=channel_layouts=stereo"
 elif [[ "${AUDIO_CHANNELS}" -gt 2 && "${CHANNEL_LAYOUT}" = "4.0" ]] ; then
   _report -wt "The first audio track has more than 2 channels. Considering channel 1 for left and channel 2 for right and ignoring the rest."
   _add_audio_filter -p "[0:a:0]channelmap=0|1:stereo"
 else
   _add_audio_filter "aformat=channel_layouts=stereo"
 fi
}

# input options
INPUTOPTIONS+=(-nostdin)
INPUTOPTIONS+=(-vsync 0)
INPUTOPTIONS+=(-v info)
INPUTOPTIONS+=(-hide_banner)
INPUTOPTIONS+=(-stats)

LOGDIR="LOGS"

# STREAMING_MPEG4 settings
 # output settings
 STREAMING_MPEG4_EXTENSION="mp4"
 STREAMING_MPEG4_SUFFIX=""
 STREAMING_MPEG4_RELATIVE_PATH="STREAMING_MPEG4"
 # video settings
 STREAMING_MPEG4_OPTS+=(-c:v libx264)
 STREAMING_MPEG4_OPTS+=(-profile:v high)
 STREAMING_MPEG4_OPTS+=(-pix_fmt yuv420p)
 STREAMING_MPEG4_OPTS+=(-crf 21) # increase to reduce quality and size
 STREAMING_MPEG4_OPTS+=(-maxrate 2000k) # set maximum bitrate despite quality
 # audio settings
 STREAMING_MPEG4_OPTS+=(-c:a aac)
 # container settings
 STREAMING_MPEG4_OPTS+=(-f mp4)
 STREAMING_MPEG4_OPTS+=(-movflags faststart)

# STREAMING_WEBM settings
 # output settings
 STREAMING_WEBM_EXTENSION="webm"
 STREAMING_WEBM_SUFFIX=""
 STREAMING_WEBM_RELATIVE_PATH="STREAMING_WEBM"
 # video settings
 STREAMING_WEBM_OPTS+=(-c:v vp10)
 STREAMING_WEBM_OPTS+=(-pix_fmt yuv420p)
 STREAMING_WEBM_OPTS+=(-maxrate 2000k) # set maximum bitrate despite quality
 # audio settings
 STREAMING_WEBM_OPTS+=(-c:a opus)
 # container settings
 STREAMING_WEBM_OPTS+=(-f webm)


# SCREENING_PRORES settings
 # output settings
 SCREENING_PRORES_EXTENSION="mov"
 SCREENING_PRORES_SUFFIX=""
 SCREENING_PRORES_RELATIVE_PATH="SCREENING_PRORES"
 # video settings
 SCREENING_PRORES_OPTS+=(-c:v prores_ks)
 SCREENING_PRORES_OPTS+=(-profile:v lt) # verify profile?
 SCREENING_PRORES_OPTS+=(-flags +ildct+ilme)
 # audio settings
 SCREENING_PRORES_OPTS+=(-c:a pcm_s16le)
 # container settings
 SCREENING_PRORES_OPTS+=(-f mov)
 SCREENING_PRORES_OPTS+=(-map 0:v)
 SCREENING_PRORES_OPTS+=(-map 0:a)

# SCREENING_FFV1 settings
 # output settings
 SCREENING_FFV1_EXTENSION="mkv"
 SCREENING_FFV1_SUFFIX=""
 SCREENING_FFV1_RELATIVE_PATH="SCREENING_FFV1"
 # video settings
 SCREENING_FFV1_OPTS+=(-c:v ffv1)
 SCREENING_FFV1_OPTS+=(-level 3)
 SCREENING_FFV1_OPTS+=(-g 1)
 SCREENING_FFV1_OPTS+=(-slices 24)
 SCREENING_FFV1_OPTS+=(-slicecrc 1)
 # audio settings
 SCREENING_FFV1_OPTS+=(-c:a flac)
 # container settings
 SCREENING_FFV1_OPTS+=(-f matroska)
 SCREENING_FFV1_OPTS+=(-map 0:v)
 SCREENING_FFV1_OPTS+=(-map 0:a)

while [ "${*}" != "" ] ; do
   _unset_variables
   INPUT="${1}"
   shift
   # get context about the input

   # encoding options
   _get_input_info "${INPUT}"
   if [[ "${CODEC_NAME}" == "jpeg2000" && "${HEIGHT}" == "288" ]] ; then
     _add_video_filter "weave=first_field=top"
     _add_video_filter "setsar=sar*2"
   fi
   

    if [[ "${SCREENING_FFV1_ENABLE}"  ]] ; then
        SCREENING_FFV1_OUTPUT="${SCREENING_FFV1_RELATIVE_PATH}/$(basename "${INPUT%.*}")${SCREENING_FFV1_SUFFIX}.${SCREENING_FFV1_EXTENSION}"
        _mkdir2 "$(dirname "${SCREENING_FFV1_OUTPUT}")" "${LOGDIR}"
        OUTPUTS+=(${SCREENING_FFV1_OPTS[@]} -vf ${VIDEOFILTERCHAIN} ${SCREENING_FFV1_OUTPUT})
    fi

   export FFREPORT="file=${LOGDIR}/$(basename "${0}")_%p_%t.txt"
   echo ffmpeg "${INPUTOPTIONS[@]}" -i "${INPUT}" "${OUTPUTS[@]}"
   ffmpeg "${INPUTOPTIONS[@]}" -i "${INPUT}" "${OUTPUTS[@]}"
   echo
 done